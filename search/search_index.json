{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Start Welcome This is the manual, for the Github repository Containers 101 The purpose of this training, is to provide you with an enviroment, where you can learn the basics of containers. When you are done, you should have the skills, to go out and create your own containers, deploy them, and harwest some of the benefits, containers provide. Happy learning :-) Getting Started To get started with the training, you first need to login to your Github account, and open the repository github.com/rhjensen79/containers101 To get your own copy, you need to fork it. Forking means, that you take a copy, of the repo, and save it under your own name. This means that all changes, are your own, and does not affect the \"original\" repository. Start by pressing the Fork button, in the top right corner, in the repository page. Then save it under your own username/reponame You can keep the checkmark in \"Copy the master branch only\" since that is the only branch you will need. Click the green \"Code\" button, and select the \"Codespaces\" tab, and click \"Create Codespace on master\" If you have vscode installed, it might ask you \"Do you want to allow this page to open \u201cVisual Studio Code\u201d?\". If you want to use your local vscode client, then just say allow. After some time, your browser or vscode (depending on your choice) will open, with an enviroment, with all the files, ready for you to use. You are now ready to proceed to the next step.","title":"Start"},{"location":"#start","text":"","title":"Start"},{"location":"#welcome","text":"This is the manual, for the Github repository Containers 101 The purpose of this training, is to provide you with an enviroment, where you can learn the basics of containers. When you are done, you should have the skills, to go out and create your own containers, deploy them, and harwest some of the benefits, containers provide. Happy learning :-)","title":"Welcome"},{"location":"#getting-started","text":"To get started with the training, you first need to login to your Github account, and open the repository github.com/rhjensen79/containers101 To get your own copy, you need to fork it. Forking means, that you take a copy, of the repo, and save it under your own name. This means that all changes, are your own, and does not affect the \"original\" repository. Start by pressing the Fork button, in the top right corner, in the repository page. Then save it under your own username/reponame You can keep the checkmark in \"Copy the master branch only\" since that is the only branch you will need. Click the green \"Code\" button, and select the \"Codespaces\" tab, and click \"Create Codespace on master\" If you have vscode installed, it might ask you \"Do you want to allow this page to open \u201cVisual Studio Code\u201d?\". If you want to use your local vscode client, then just say allow. After some time, your browser or vscode (depending on your choice) will open, with an enviroment, with all the files, ready for you to use. You are now ready to proceed to the next step.","title":"Getting Started"},{"location":"docker_compose/","text":"Docker-Compose","title":"Docker-Compose"},{"location":"docker_compose/#docker-compose","text":"","title":"Docker-Compose"},{"location":"dockerfile/","text":"Intro What is a Dockerfile ? Docker.com describes it like this \"A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image\" So it's a file, with the name Dockerfile that contains the steps, on how to build the container. Sounds simple right ? Well that's because it is. Below is a sample of how a simple Dockerfile could look. Dockerfile FROM nginx:latest WORKDIR usr/share/nginx/html RUN apt-get update && apt-get upgrade -y RUN echo \"test\" COPY ./html /usr/share/nginx/html EXPOSE 80 Let's look at it, line for line. FROM nginx:latest Sets the source container, that we are building upon, to the latest Nginx container, from DockerHub. WORKDIR usr/share/nginx/html Sets the working directory, inside the container, where all commands will be run from. RUN apt-get update && apt-get upgrade -y Runs a simple update and upgrade, of all packages inside the container. The cammand reqires the container os, to be able to use apt as packagemanager. RUN echo \"test\" Runs another simple command. COPY ./html /usr/share/nginx/html Copys the files, from the source operating system, to the container. EXPOSE 80 Let's the admin know, that this container responds to port 80. Note it's only for information. Build Now that we understand the Dockerfile, let's try to build a conainer from it. Take the content of the dockerfile, and save it into a file called Dockerfile in the root directory. To build it, we need to run the command docker build -t container:1 . Note the . in the end. It's important, and means that docker should look for a Dockerfile in the current directory, so don't forget it. The -t is to give the container a tag, so we can request it. A tag consist of a name:version You can use latest to get the lastest version, but it's considered best practice, to always describe the version, so you are sure what you are getting, and you are able to revert to an earlier version, if that is needed. For now, our version is 1 After a bit of time, you should see output, that looks something like this. => exporting to image 1.4s => => exporting layers 1.3s => => writing image sha256:feb72bf5b3f05eace0f62414347 0.0s => => naming to docker.io/library/container:1 0.0s This means that you have now created a container, with the name container:1 on your local system. To run it, you simply you simply run docker run container:1 The container starts the Nginx process, and halts there, waiting for inputs. You can, stop it, using ctrl + c Some containers are build to keep running, like this webserver, and others are just running some commands, and exits after. Both is valid usecases.","title":"Dockerfile"},{"location":"dockerfile/#intro","text":"What is a Dockerfile ? Docker.com describes it like this \"A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image\" So it's a file, with the name Dockerfile that contains the steps, on how to build the container. Sounds simple right ? Well that's because it is. Below is a sample of how a simple Dockerfile could look.","title":"Intro"},{"location":"dockerfile/#dockerfile","text":"FROM nginx:latest WORKDIR usr/share/nginx/html RUN apt-get update && apt-get upgrade -y RUN echo \"test\" COPY ./html /usr/share/nginx/html EXPOSE 80 Let's look at it, line for line. FROM nginx:latest Sets the source container, that we are building upon, to the latest Nginx container, from DockerHub. WORKDIR usr/share/nginx/html Sets the working directory, inside the container, where all commands will be run from. RUN apt-get update && apt-get upgrade -y Runs a simple update and upgrade, of all packages inside the container. The cammand reqires the container os, to be able to use apt as packagemanager. RUN echo \"test\" Runs another simple command. COPY ./html /usr/share/nginx/html Copys the files, from the source operating system, to the container. EXPOSE 80 Let's the admin know, that this container responds to port 80. Note it's only for information.","title":"Dockerfile"},{"location":"dockerfile/#build","text":"Now that we understand the Dockerfile, let's try to build a conainer from it. Take the content of the dockerfile, and save it into a file called Dockerfile in the root directory. To build it, we need to run the command docker build -t container:1 . Note the . in the end. It's important, and means that docker should look for a Dockerfile in the current directory, so don't forget it. The -t is to give the container a tag, so we can request it. A tag consist of a name:version You can use latest to get the lastest version, but it's considered best practice, to always describe the version, so you are sure what you are getting, and you are able to revert to an earlier version, if that is needed. For now, our version is 1 After a bit of time, you should see output, that looks something like this. => exporting to image 1.4s => => exporting layers 1.3s => => writing image sha256:feb72bf5b3f05eace0f62414347 0.0s => => naming to docker.io/library/container:1 0.0s This means that you have now created a container, with the name container:1 on your local system. To run it, you simply you simply run docker run container:1 The container starts the Nginx process, and halts there, waiting for inputs. You can, stop it, using ctrl + c Some containers are build to keep running, like this webserver, and others are just running some commands, and exits after. Both is valid usecases.","title":"Build"},{"location":"installing_docker/","text":"Installing Docker","title":"Installing Docker"},{"location":"installing_docker/#installing-docker","text":"","title":"Installing Docker"},{"location":"page2/","text":"","title":"Page2"},{"location":"registrys/","text":"Registrys","title":"Registrys"},{"location":"registrys/#registrys","text":"","title":"Registrys"},{"location":"trubleshooting/","text":"Trubleshooting","title":"Trubleshooting"},{"location":"trubleshooting/#trubleshooting","text":"","title":"Trubleshooting"},{"location":"volumes/","text":"Volumes","title":"Volumes"},{"location":"volumes/#volumes","text":"","title":"Volumes"},{"location":"what_is_a_container/","text":"What is a container Docker Intro First Container Kubernetes Sample One more, finally. Or not? :) Now: some Look what she said: This is it! Subtitle And now this: One Two Three four As well As this Another a link More? Can we now have the build ? NOW! Not gonna work, is it?","title":"What is a container"},{"location":"what_is_a_container/#what-is-a-container","text":"","title":"What is a container"},{"location":"what_is_a_container/#docker","text":"","title":"Docker"},{"location":"what_is_a_container/#intro","text":"","title":"Intro"},{"location":"what_is_a_container/#first-container","text":"","title":"First Container"},{"location":"what_is_a_container/#kubernetes","text":"","title":"Kubernetes"},{"location":"what_is_a_container/#sample","text":"One more, finally. Or not? :) Now: some Look what she said: This is it!","title":"Sample"},{"location":"what_is_a_container/#subtitle","text":"And now this: One Two Three four","title":"Subtitle"},{"location":"what_is_a_container/#as-well","text":"","title":"As well"},{"location":"what_is_a_container/#as-this","text":"","title":"As this"},{"location":"what_is_a_container/#another","text":"a link More? Can we now have the build ? NOW! Not gonna work, is it?","title":"Another"}]}